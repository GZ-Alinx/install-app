global_defs {
   router_id gnome  #标识本节点的名称，通常为hostname
}

## vrrp_script区域定义脚本名字和脚本执行的间隔和脚本执行的优先级变更
## keepalived会定时执行脚本并对脚本执行的结果进行分析,动态调整vrrp_instance的优先级。
## 如果脚本执行结果为0,并且weight配置的值大于0,则优先级相应的增加。如果脚本执行结果非0,
## 并且weight配置的值小于 0,则优先级相应的减少。其他情况,维持原本配置的优先级,即配置文件中priority对应的值。
#vrrp_script chk_nginx {
#       script "/etc/keepalived/nginx_check.sh"
#       interval 2  #每2秒检测一次nginx的运行状态
#       weight -20  #失败一次，将自己的优先级-20
#	   #fall 3
#	   #rise 2
#	   #timeout 10
#	   user root   #需要指定用户，否则执行脚本的进程会变成僵尸进程，且脚本只会启动时执行一次；使用脚本语句不会有该问题
#}

vrrp_instance VI_1 {
    state MASTER                  # 状态，主节点为MASTER，备份节点为BACKUP
    interface ens33               # 指定HA检测的网络接口，绑定VIP的网络接口，通过ifconfig查看自己的网络接口，实例绑定的网卡，因为在配置虚拟IP的时候必须是在已有的网卡上添加的
    virtual_router_id 51          # 设置VRID，虚拟路由的ID号,两个节点设置必须一样,可选IP最后一段使用,相同的VRID为一个组,他将决定多播的MAC地址
    mcast_src_ip 192.168.1.8      # 本机IP地址
    priority 100                  # 节点优先级，值范围0～254，MASTER要比BACKUP高
    advert_int 1                  # 组播信息发送时间间隔，两个节点必须设置一样，默认为1秒
    # 设置验证信息，两个节点必须一致
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    # 虚拟IP，两个节点设置必须一样。可以设置多个，一行写一个
    virtual_ipaddress {
        192.168.1.2/24 label ens33:0
    }
#	# 引用(vrrp_script)中定义的脚本，有点类似脚本里面的函数一样：先定义，后引用函数名
#    track_script {
#       chk_nginx  # nginx存活状态检测脚本
#    }

}

virtual_server 192.168.1.2 80 {
    delay_loop 6
    lb_algo rr
    lb_kind NAT
    persistence_timeout 50
    protocol TCP

#    sorry_server 192.168.1.10 80

    real_server 192.168.1.8 80 {
        weight 1
        HTTP_GET {
            url {
              path /
              status_code 200
            }
            connect_timeout 3
            retry 3
            delay_before_retry 3
        }
    }

    real_server 192.168.1.9 80 {
        weight 1
        HTTP_GET {
            url {
              path /
              status_code 200
            }
            connect_timeout 3
            retry 3
            delay_before_retry 3
        }
    }
}